/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package serviciopersonas.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import serviciopersonas.model.Persona;
import serviciopersonas.model.PersonaModel;
import serviciopersonas.model.PersonaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Persona service. Represents a row in the &quot;FOO_Persona&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PersonaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersonaImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersonaImpl
 * @see Persona
 * @see PersonaModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PersonaModelImpl extends BaseModelImpl<Persona>
	implements PersonaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a persona model instance should use the {@link Persona} interface instead.
	 */
	public static final String TABLE_NAME = "FOO_Persona";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dni", Types.VARCHAR },
			{ "nombre", Types.VARCHAR },
			{ "edad", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("dni", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nombre", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("edad", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table FOO_Persona (dni VARCHAR(75) not null primary key,nombre VARCHAR(75) null,edad INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table FOO_Persona";
	public static final String ORDER_BY_JPQL = " ORDER BY persona.dni ASC";
	public static final String ORDER_BY_SQL = " ORDER BY FOO_Persona.dni ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(serviciopersonas.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.serviciopersonas.model.Persona"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(serviciopersonas.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.serviciopersonas.model.Persona"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Persona toModel(PersonaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Persona model = new PersonaImpl();

		model.setDni(soapModel.getDni());
		model.setNombre(soapModel.getNombre());
		model.setEdad(soapModel.getEdad());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Persona> toModels(PersonaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Persona> models = new ArrayList<Persona>(soapModels.length);

		for (PersonaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(serviciopersonas.service.util.ServiceProps.get(
				"lock.expiration.time.serviciopersonas.model.Persona"));

	public PersonaModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _dni;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setDni(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dni;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Persona.class;
	}

	@Override
	public String getModelClassName() {
		return Persona.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dni", getDni());
		attributes.put("nombre", getNombre());
		attributes.put("edad", getEdad());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String dni = (String)attributes.get("dni");

		if (dni != null) {
			setDni(dni);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}

		Integer edad = (Integer)attributes.get("edad");

		if (edad != null) {
			setEdad(edad);
		}
	}

	@JSON
	@Override
	public String getDni() {
		if (_dni == null) {
			return StringPool.BLANK;
		}
		else {
			return _dni;
		}
	}

	@Override
	public void setDni(String dni) {
		_dni = dni;
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@JSON
	@Override
	public int getEdad() {
		return _edad;
	}

	@Override
	public void setEdad(int edad) {
		_edad = edad;
	}

	@Override
	public Persona toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Persona)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersonaImpl personaImpl = new PersonaImpl();

		personaImpl.setDni(getDni());
		personaImpl.setNombre(getNombre());
		personaImpl.setEdad(getEdad());

		personaImpl.resetOriginalValues();

		return personaImpl;
	}

	@Override
	public int compareTo(Persona persona) {
		String primaryKey = persona.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Persona)) {
			return false;
		}

		Persona persona = (Persona)obj;

		String primaryKey = persona.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Persona> toCacheModel() {
		PersonaCacheModel personaCacheModel = new PersonaCacheModel();

		personaCacheModel.dni = getDni();

		String dni = personaCacheModel.dni;

		if ((dni != null) && (dni.length() == 0)) {
			personaCacheModel.dni = null;
		}

		personaCacheModel.nombre = getNombre();

		String nombre = personaCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			personaCacheModel.nombre = null;
		}

		personaCacheModel.edad = getEdad();

		return personaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{dni=");
		sb.append(getDni());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append(", edad=");
		sb.append(getEdad());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("serviciopersonas.model.Persona");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dni</column-name><column-value><![CDATA[");
		sb.append(getDni());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>edad</column-name><column-value><![CDATA[");
		sb.append(getEdad());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Persona.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Persona.class
		};
	private String _dni;
	private String _nombre;
	private int _edad;
	private Persona _escapedModel;
}